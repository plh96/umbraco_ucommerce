<configuration>
  <components>
    <!-- Pipeline Instance -->
    <component
						id="AddToBasket"
						service="Ucommerce.Pipelines.IPipeline`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
						type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.AddToBasketPipeline, Ucommerce.Pipelines">
      <parameters>
        <tasks>
          <array>
            <!-- Validation -->
            <value>${AddToBasket.ValidatePipelineArguments}</value>
            <value>${AddToBasket.ValidateProductCatalogGroupContext}</value>
            <value>${AddToBasket.ValidateIsSellableProduct}</value>
            <value>${AddToBasket.ValidateProductIsAddedWithSameCurrencyAsBasket}</value>

            <!-- Set up new order line -->
            <value>${AddToBasket.CreateOrderLine}</value>
            <value>${AddToBasket.CopyProductNameFromCatalog}</value>

            <!-- If existing order line should be used, override if found -->
            <value>${AddToBasket.OverrideOrderlineWithExisting}</value>

            <value>${AddToBasket.IncrementQuantity}</value>

            <!--Calculate amounts-->
            <value>${AddToBasket.CalculateUnitPrice}</value>
            <value>${AddToBasket.RoundingOffUnitPrice}</value>
            <value>${AddToBasket.CalculateUnitTax}</value>
            
            <value>${AddToBasket.AddNewOrderLineToOrder}</value>
            <value>${AddToBasket.AddPropertiesToOrderLine}</value>
            <value>${AddToBasket.ExecuteBasketPipeline}</value>
          </array>
        </tasks>
      </parameters>
    </component>

    <!-- Pipeline Tasks-->
    <component id="AddToBasket.ValidatePipelineArguments"
								 service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
								 type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.ValidatePipelineArgumentsTask, Ucommerce.Pipelines" />

    <component id="AddToBasket.ValidateProductIsAddedWithSameCurrencyAsBasket"
								 service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
								 type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.ValidateProductIsAddedWithSameCurrencyAsBasketTask, Ucommerce.Pipelines" />

    <component id="AddToBasket.AddNewOrderLineToOrder"
								 service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
								 type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.AddNewOrderLineToOrderTask, Ucommerce.Pipelines" />

    <component id="AddToBasket.IncrementQuantity"
								 service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
								 type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.IncrementQuantityTask, Ucommerce.Pipelines" />

    <component id="AddToBasket.ValidateProductCatalogGroupContext"
								 service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
								 type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.ValidateOrderAssignedToProductCatalogGroupTask, Ucommerce.Pipelines" />

    <component id="AddToBasket.ValidateIsSellableProduct"
               service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
               type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.ValidateIsSellableProductTask, Ucommerce.Pipelines" />

    <component id="AddToBasket.CalculateUnitPrice"
               service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
               type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.CalculateUnitPriceTask, Ucommerce.Pipelines" />

    <component id="AddToBasket.RoundingOffUnitPrice"
               service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
               type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.RoundingOffUnitPriceTask, Ucommerce.Pipelines" />

    <component id="AddToBasket.CalculateUnitTax"
               service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
               type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.CalculateUnitTaxTask, Ucommerce.Pipelines" />

    <component id="AddToBasket.OverrideOrderlineWithExisting"
               service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
               type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.OverrideOrderlineWithExistingTask, Ucommerce.Pipelines" />

    <component id="AddToBasket.CopyProductNameFromCatalog"
               service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
               type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.CopyProductNameFromCatalogTask, Ucommerce.Pipelines" />

    <component id="AddToBasket.CreateOrderLine"
               service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
               type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.CreateOrderLineTask, Ucommerce.Pipelines" />

    <component id="AddToBasket.AddPropertiesToOrderLine"
               service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
               type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.AddPropertiesToOrderLineTask, Ucommerce.Pipelines">
      <parameters>
        <propertiesToCopy>
          <array>
            <value>_hasCustomPrice</value>
          </array>
        </propertiesToCopy>
      </parameters>
    </component>

    <component id="AddToBasket.ExecuteBasketPipeline"
               service="Ucommerce.Pipelines.IPipelineTask`1[[Ucommerce.Pipelines.IPipelineArgs`2[[Ucommerce.Pipelines.AddToBasket.AddToBasketRequest, Ucommerce],[Ucommerce.Pipelines.AddToBasket.AddToBasketResponse, Ucommerce]], Ucommerce]], Ucommerce"
               type="Ucommerce.Pipelines.Transactions.Baskets.AddToBasket.ExecuteBasketPipelineTask, Ucommerce.Pipelines" >
      <parameters>
        <basketPipeline>${Basket}</basketPipeline>
      </parameters>
    </component>
  </components>
</configuration>